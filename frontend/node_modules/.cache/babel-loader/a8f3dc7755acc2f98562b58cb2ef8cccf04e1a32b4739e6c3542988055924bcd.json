{"ast":null,"code":"// API service for connecting to the backend database\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nclass ApiProductService {\n  // Transform products to add image property from images array\n  transformProducts(products) {\n    return products.map(product => {\n      var _product$images$find;\n      return {\n        ...product,\n        image: product.images && product.images.length > 0 ? `http://localhost:5000${((_product$images$find = product.images.find(img => img.isPrimary)) === null || _product$images$find === void 0 ? void 0 : _product$images$find.url) || product.images[0].url}` : `/images/placeholder.png`\n      };\n    });\n  }\n\n  // Transform single product\n  transformProduct(product) {\n    var _product$images$find2;\n    return {\n      ...product,\n      image: product.images && product.images.length > 0 ? `http://localhost:5000${((_product$images$find2 = product.images.find(img => img.isPrimary)) === null || _product$images$find2 === void 0 ? void 0 : _product$images$find2.url) || product.images[0].url}` : `/images/placeholder.png`\n    };\n  }\n\n  // Get all products with optional filters\n  async getProducts(params = {}) {\n    try {\n      const queryString = new URLSearchParams(params).toString();\n      const url = queryString ? `${API_BASE_URL}/products?${queryString}` : `${API_BASE_URL}/products`;\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      const products = data.products || data; // Handle different response structures\n\n      // Transform products to add image property\n      return this.transformProducts(Array.isArray(products) ? products : [products]);\n    } catch (error) {\n      console.error('Error fetching products:', error);\n      throw error;\n    }\n  }\n\n  // Get featured products\n  async getFeaturedProducts(limit = 4) {\n    try {\n      return await this.getProducts({\n        featured: true,\n        limit\n      });\n    } catch (error) {\n      console.error('Error fetching featured products:', error);\n      throw error;\n    }\n  }\n\n  // Get products by category\n  async getProductsByCategory(category, limit = 20) {\n    try {\n      return await this.getProducts({\n        category,\n        limit\n      });\n    } catch (error) {\n      console.error('Error fetching products by category:', error);\n      throw error;\n    }\n  }\n\n  // Get product by ID\n  async getProductById(id) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/products/${id}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      const product = data.product || data; // Handle different response structures\n\n      // Transform product to add image property\n      return this.transformProduct(product);\n    } catch (error) {\n      console.error('Error fetching product by ID:', error);\n      throw error;\n    }\n  }\n\n  // Search products\n  async searchProducts(searchTerm, options = {}) {\n    try {\n      return await this.getProducts({\n        search: searchTerm,\n        ...options\n      });\n    } catch (error) {\n      console.error('Error searching products:', error);\n      throw error;\n    }\n  }\n\n  // Get products with filters\n  async getFilteredProducts(filters) {\n    try {\n      return await this.getProducts(filters);\n    } catch (error) {\n      console.error('Error fetching filtered products:', error);\n      throw error;\n    }\n  }\n\n  // Get product categories\n  async getCategories() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/products/categories`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error fetching categories:', error);\n      // Return default categories if API fails\n      return ['clothes', 'shoes', 'accessories'];\n    }\n  }\n\n  // Get new arrivals\n  async getNewArrivals(limit = 8) {\n    try {\n      return await this.getProducts({\n        tags: 'new',\n        sort: 'newest',\n        limit\n      });\n    } catch (error) {\n      console.error('Error fetching new arrivals:', error);\n      throw error;\n    }\n  }\n\n  // Get sale products\n  async getSaleProducts(limit = 8) {\n    try {\n      return await this.getProducts({\n        tags: 'sale',\n        sort: 'price',\n        limit\n      });\n    } catch (error) {\n      console.error('Error fetching sale products:', error);\n      throw error;\n    }\n  }\n\n  // Add product (admin only)\n  async addProduct(productData, token) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/products`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(productData)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error adding product:', error);\n      throw error;\n    }\n  }\n\n  // Update product (admin only)\n  async updateProduct(id, productData, token) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/products/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(productData)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error updating product:', error);\n      throw error;\n    }\n  }\n\n  // Delete product (admin only)\n  async deleteProduct(id, token) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/products/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Error deleting product:', error);\n      throw error;\n    }\n  }\n}\n\n// Create and export instance\nconst apiProductService = new ApiProductService();\nexport default apiProductService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiProductService","transformProducts","products","map","product","_product$images$find","image","images","length","find","img","isPrimary","url","transformProduct","_product$images$find2","getProducts","params","queryString","URLSearchParams","toString","response","fetch","ok","Error","status","data","json","Array","isArray","error","console","getFeaturedProducts","limit","featured","getProductsByCategory","category","getProductById","id","searchProducts","searchTerm","options","search","getFilteredProducts","filters","getCategories","getNewArrivals","tags","sort","getSaleProducts","addProduct","productData","token","method","headers","body","JSON","stringify","updateProduct","deleteProduct","success","apiProductService"],"sources":["C:/Users/USER/OneDrive/Desktop/ecommerce/frontend/src/services/apiProductService.js"],"sourcesContent":["// API service for connecting to the backend database\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nclass ApiProductService {\r\n  // Transform products to add image property from images array\r\n  transformProducts(products) {\r\n    return products.map(product => ({\r\n      ...product,\r\n      image: product.images && product.images.length > 0 \r\n        ? `http://localhost:5000${product.images.find(img => img.isPrimary)?.url || product.images[0].url}`\r\n        : `/images/placeholder.png`\r\n    }));\r\n  }\r\n\r\n  // Transform single product\r\n  transformProduct(product) {\r\n    return {\r\n      ...product,\r\n      image: product.images && product.images.length > 0 \r\n        ? `http://localhost:5000${product.images.find(img => img.isPrimary)?.url || product.images[0].url}`\r\n        : `/images/placeholder.png`\r\n    };\r\n  }\r\n\r\n  // Get all products with optional filters\r\n  async getProducts(params = {}) {\r\n    try {\r\n      const queryString = new URLSearchParams(params).toString();\r\n      const url = queryString ? `${API_BASE_URL}/products?${queryString}` : `${API_BASE_URL}/products`;\r\n      \r\n      const response = await fetch(url);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      const products = data.products || data; // Handle different response structures\r\n      \r\n      // Transform products to add image property\r\n      return this.transformProducts(Array.isArray(products) ? products : [products]);\r\n    } catch (error) {\r\n      console.error('Error fetching products:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get featured products\r\n  async getFeaturedProducts(limit = 4) {\r\n    try {\r\n      return await this.getProducts({ featured: true, limit });\r\n    } catch (error) {\r\n      console.error('Error fetching featured products:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get products by category\r\n  async getProductsByCategory(category, limit = 20) {\r\n    try {\r\n      return await this.getProducts({ category, limit });\r\n    } catch (error) {\r\n      console.error('Error fetching products by category:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get product by ID\r\n  async getProductById(id) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/products/${id}`);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      const product = data.product || data; // Handle different response structures\r\n      \r\n      // Transform product to add image property\r\n      return this.transformProduct(product);\r\n    } catch (error) {\r\n      console.error('Error fetching product by ID:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Search products\r\n  async searchProducts(searchTerm, options = {}) {\r\n    try {\r\n      return await this.getProducts({ \r\n        search: searchTerm, \r\n        ...options \r\n      });\r\n    } catch (error) {\r\n      console.error('Error searching products:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get products with filters\r\n  async getFilteredProducts(filters) {\r\n    try {\r\n      return await this.getProducts(filters);\r\n    } catch (error) {\r\n      console.error('Error fetching filtered products:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get product categories\r\n  async getCategories() {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/products/categories`);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error fetching categories:', error);\r\n      // Return default categories if API fails\r\n      return ['clothes', 'shoes', 'accessories'];\r\n    }\r\n  }\r\n\r\n  // Get new arrivals\r\n  async getNewArrivals(limit = 8) {\r\n    try {\r\n      return await this.getProducts({ \r\n        tags: 'new', \r\n        sort: 'newest', \r\n        limit \r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching new arrivals:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get sale products\r\n  async getSaleProducts(limit = 8) {\r\n    try {\r\n      return await this.getProducts({ \r\n        tags: 'sale', \r\n        sort: 'price', \r\n        limit \r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching sale products:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Add product (admin only)\r\n  async addProduct(productData, token) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/products`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify(productData)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error adding product:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Update product (admin only)\r\n  async updateProduct(id, productData, token) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/products/${id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify(productData)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error updating product:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Delete product (admin only)\r\n  async deleteProduct(id, token) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/products/${id}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Error deleting product:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Create and export instance\r\nconst apiProductService = new ApiProductService();\r\nexport default apiProductService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}