{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\OneDrive\\\\Desktop\\\\ecommerce\\\\frontend\\\\src\\\\context\\\\MarketingContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MarketingContext = /*#__PURE__*/createContext();\nconst marketingReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOAD_MARKETING_DATA':\n      return {\n        ...state,\n        ...action.payload,\n        loading: false\n      };\n    case 'SUBSCRIBE_NEWSLETTER':\n      const subscription = {\n        email: action.payload.email,\n        preferences: action.payload.preferences,\n        subscribedAt: new Date().toISOString(),\n        status: 'active',\n        id: Date.now().toString()\n      };\n      const updatedSubscriptions = [...state.subscriptions, subscription];\n      localStorage.setItem('newsletter_subscriptions', JSON.stringify(updatedSubscriptions));\n      return {\n        ...state,\n        subscriptions: updatedSubscriptions,\n        userSubscription: subscription\n      };\n    case 'UNSUBSCRIBE_NEWSLETTER':\n      const filteredSubscriptions = state.subscriptions.filter(sub => sub.id !== action.payload);\n      localStorage.setItem('newsletter_subscriptions', JSON.stringify(filteredSubscriptions));\n      return {\n        ...state,\n        subscriptions: filteredSubscriptions,\n        userSubscription: null\n      };\n    case 'UPDATE_PREFERENCES':\n      const updatedSubs = state.subscriptions.map(sub => sub.id === action.payload.id ? {\n        ...sub,\n        preferences: action.payload.preferences,\n        updatedAt: new Date().toISOString()\n      } : sub);\n      localStorage.setItem('newsletter_subscriptions', JSON.stringify(updatedSubs));\n      const updatedUserSub = updatedSubs.find(sub => sub.id === action.payload.id);\n      return {\n        ...state,\n        subscriptions: updatedSubs,\n        userSubscription: updatedUserSub || state.userSubscription\n      };\n    case 'DISMISS_BANNER':\n      const dismissedBanners = [...state.dismissedBanners, action.payload];\n      localStorage.setItem('dismissed_banners', JSON.stringify(dismissedBanners));\n      return {\n        ...state,\n        dismissedBanners\n      };\n    case 'ADD_CAMPAIGN':\n      const campaigns = [...state.campaigns, action.payload];\n      localStorage.setItem('marketing_campaigns', JSON.stringify(campaigns));\n      return {\n        ...state,\n        campaigns\n      };\n    case 'TRACK_INTERACTION':\n      const interactions = [...state.interactions, {\n        ...action.payload,\n        timestamp: new Date().toISOString(),\n        id: Date.now().toString()\n      }];\n\n      // Keep only last 100 interactions to prevent localStorage bloat\n      const recentInteractions = interactions.slice(-100);\n      localStorage.setItem('marketing_interactions', JSON.stringify(recentInteractions));\n      return {\n        ...state,\n        interactions: recentInteractions\n      };\n    default:\n      return state;\n  }\n};\nconst initialState = {\n  subscriptions: [],\n  userSubscription: null,\n  dismissedBanners: [],\n  campaigns: [],\n  interactions: [],\n  preferences: {\n    categories: ['new-arrivals', 'sales', 'seasonal'],\n    frequency: 'weekly',\n    // daily, weekly, monthly\n    format: 'html' // html, text\n  },\n  loading: true\n};\nexport const MarketingProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(marketingReducer, initialState);\n\n  // Load marketing data from localStorage on app start\n  useEffect(() => {\n    try {\n      const subscriptions = JSON.parse(localStorage.getItem('newsletter_subscriptions') || '[]');\n      const dismissedBanners = JSON.parse(localStorage.getItem('dismissed_banners') || '[]');\n      const campaigns = JSON.parse(localStorage.getItem('marketing_campaigns') || '[]');\n      const interactions = JSON.parse(localStorage.getItem('marketing_interactions') || '[]');\n\n      // Find user's current subscription\n      const userSubscription = subscriptions.find(sub => sub.status === 'active') || null;\n      dispatch({\n        type: 'LOAD_MARKETING_DATA',\n        payload: {\n          subscriptions,\n          userSubscription,\n          dismissedBanners,\n          campaigns,\n          interactions\n        }\n      });\n    } catch (error) {\n      console.error('Error loading marketing data:', error);\n      dispatch({\n        type: 'LOAD_MARKETING_DATA',\n        payload: {}\n      });\n    }\n  }, []);\n  const subscribeNewsletter = (email, preferences = state.preferences) => {\n    if (!email || typeof email !== 'string' || !email.includes('@')) {\n      throw new Error('Valid email address is required');\n    }\n\n    // Check if already subscribed\n    const existingSubscription = state.subscriptions.find(sub => sub.email === email && sub.status === 'active');\n    if (existingSubscription) {\n      throw new Error('Email is already subscribed');\n    }\n    dispatch({\n      type: 'SUBSCRIBE_NEWSLETTER',\n      payload: {\n        email,\n        preferences\n      }\n    });\n\n    // Track subscription interaction\n    trackInteraction('newsletter_subscribe', {\n      email,\n      preferences\n    });\n    return true;\n  };\n  const unsubscribeNewsletter = subscriptionId => {\n    if (!subscriptionId) {\n      throw new Error('Subscription ID is required');\n    }\n    dispatch({\n      type: 'UNSUBSCRIBE_NEWSLETTER',\n      payload: subscriptionId\n    });\n    trackInteraction('newsletter_unsubscribe', {\n      subscriptionId\n    });\n  };\n  const updatePreferences = (subscriptionId, preferences) => {\n    if (!subscriptionId || !preferences) {\n      throw new Error('Subscription ID and preferences are required');\n    }\n    dispatch({\n      type: 'UPDATE_PREFERENCES',\n      payload: {\n        id: subscriptionId,\n        preferences\n      }\n    });\n    trackInteraction('preferences_update', {\n      subscriptionId,\n      preferences\n    });\n  };\n  const dismissBanner = bannerId => {\n    if (!bannerId) {\n      return;\n    }\n    dispatch({\n      type: 'DISMISS_BANNER',\n      payload: bannerId\n    });\n    trackInteraction('banner_dismiss', {\n      bannerId\n    });\n  };\n  const trackInteraction = (type, data = {}) => {\n    dispatch({\n      type: 'TRACK_INTERACTION',\n      payload: {\n        type,\n        data\n      }\n    });\n  };\n  const isBannerDismissed = bannerId => {\n    return state.dismissedBanners.includes(bannerId);\n  };\n  const isSubscribed = (email = null) => {\n    if (email) {\n      return state.subscriptions.some(sub => sub.email === email && sub.status === 'active');\n    }\n    return !!state.userSubscription;\n  };\n  const getActiveSubscription = () => {\n    return state.userSubscription;\n  };\n  const getSubscriptionStats = () => {\n    const total = state.subscriptions.length;\n    const active = state.subscriptions.filter(sub => sub.status === 'active').length;\n    const recent = state.subscriptions.filter(sub => {\n      const subDate = new Date(sub.subscribedAt);\n      const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n      return subDate > weekAgo;\n    }).length;\n    return {\n      total,\n      active,\n      recent\n    };\n  };\n  const getPopularPreferences = () => {\n    const preferenceCount = {};\n    state.subscriptions.forEach(sub => {\n      if (sub.preferences && sub.preferences.categories) {\n        sub.preferences.categories.forEach(category => {\n          preferenceCount[category] = (preferenceCount[category] || 0) + 1;\n        });\n      }\n    });\n    return Object.entries(preferenceCount).sort(([, a], [, b]) => b - a).slice(0, 5).map(([category, count]) => ({\n      category,\n      count\n    }));\n  };\n  const value = {\n    // State\n    subscriptions: state.subscriptions,\n    userSubscription: state.userSubscription,\n    dismissedBanners: state.dismissedBanners,\n    campaigns: state.campaigns,\n    interactions: state.interactions,\n    preferences: state.preferences,\n    loading: state.loading,\n    // Actions\n    subscribeNewsletter,\n    unsubscribeNewsletter,\n    updatePreferences,\n    dismissBanner,\n    trackInteraction,\n    // Utilities\n    isBannerDismissed,\n    isSubscribed,\n    getActiveSubscription,\n    getSubscriptionStats,\n    getPopularPreferences\n  };\n  return /*#__PURE__*/_jsxDEV(MarketingContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 5\n  }, this);\n};\n_s(MarketingProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = MarketingProvider;\nexport const useMarketing = () => {\n  _s2();\n  const context = useContext(MarketingContext);\n  if (context === undefined) {\n    throw new Error('useMarketing must be used within a MarketingProvider');\n  }\n  return context;\n};\n_s2(useMarketing, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default MarketingContext;\nvar _c;\n$RefreshReg$(_c, \"MarketingProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","MarketingContext","marketingReducer","state","action","type","payload","loading","subscription","email","preferences","subscribedAt","Date","toISOString","status","id","now","toString","updatedSubscriptions","subscriptions","localStorage","setItem","JSON","stringify","userSubscription","filteredSubscriptions","filter","sub","updatedSubs","map","updatedAt","updatedUserSub","find","dismissedBanners","campaigns","interactions","timestamp","recentInteractions","slice","initialState","categories","frequency","format","MarketingProvider","children","_s","dispatch","parse","getItem","error","console","subscribeNewsletter","includes","Error","existingSubscription","trackInteraction","unsubscribeNewsletter","subscriptionId","updatePreferences","dismissBanner","bannerId","data","isBannerDismissed","isSubscribed","some","getActiveSubscription","getSubscriptionStats","total","length","active","recent","subDate","weekAgo","getPopularPreferences","preferenceCount","forEach","category","Object","entries","sort","a","b","count","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useMarketing","_s2","context","undefined","$RefreshReg$"],"sources":["C:/Users/USER/OneDrive/Desktop/ecommerce/frontend/src/context/MarketingContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n\r\nconst MarketingContext = createContext();\r\n\r\nconst marketingReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'LOAD_MARKETING_DATA':\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n        loading: false\r\n      };\r\n\r\n    case 'SUBSCRIBE_NEWSLETTER':\r\n      const subscription = {\r\n        email: action.payload.email,\r\n        preferences: action.payload.preferences,\r\n        subscribedAt: new Date().toISOString(),\r\n        status: 'active',\r\n        id: Date.now().toString()\r\n      };\r\n      \r\n      const updatedSubscriptions = [...state.subscriptions, subscription];\r\n      localStorage.setItem('newsletter_subscriptions', JSON.stringify(updatedSubscriptions));\r\n      \r\n      return {\r\n        ...state,\r\n        subscriptions: updatedSubscriptions,\r\n        userSubscription: subscription\r\n      };\r\n\r\n    case 'UNSUBSCRIBE_NEWSLETTER':\r\n      const filteredSubscriptions = state.subscriptions.filter(sub => sub.id !== action.payload);\r\n      localStorage.setItem('newsletter_subscriptions', JSON.stringify(filteredSubscriptions));\r\n      \r\n      return {\r\n        ...state,\r\n        subscriptions: filteredSubscriptions,\r\n        userSubscription: null\r\n      };\r\n\r\n    case 'UPDATE_PREFERENCES':\r\n      const updatedSubs = state.subscriptions.map(sub => \r\n        sub.id === action.payload.id \r\n          ? { ...sub, preferences: action.payload.preferences, updatedAt: new Date().toISOString() }\r\n          : sub\r\n      );\r\n      localStorage.setItem('newsletter_subscriptions', JSON.stringify(updatedSubs));\r\n      \r\n      const updatedUserSub = updatedSubs.find(sub => sub.id === action.payload.id);\r\n      \r\n      return {\r\n        ...state,\r\n        subscriptions: updatedSubs,\r\n        userSubscription: updatedUserSub || state.userSubscription\r\n      };\r\n\r\n    case 'DISMISS_BANNER':\r\n      const dismissedBanners = [...state.dismissedBanners, action.payload];\r\n      localStorage.setItem('dismissed_banners', JSON.stringify(dismissedBanners));\r\n      \r\n      return {\r\n        ...state,\r\n        dismissedBanners\r\n      };\r\n\r\n    case 'ADD_CAMPAIGN':\r\n      const campaigns = [...state.campaigns, action.payload];\r\n      localStorage.setItem('marketing_campaigns', JSON.stringify(campaigns));\r\n      \r\n      return {\r\n        ...state,\r\n        campaigns\r\n      };\r\n\r\n    case 'TRACK_INTERACTION':\r\n      const interactions = [...state.interactions, {\r\n        ...action.payload,\r\n        timestamp: new Date().toISOString(),\r\n        id: Date.now().toString()\r\n      }];\r\n      \r\n      // Keep only last 100 interactions to prevent localStorage bloat\r\n      const recentInteractions = interactions.slice(-100);\r\n      localStorage.setItem('marketing_interactions', JSON.stringify(recentInteractions));\r\n      \r\n      return {\r\n        ...state,\r\n        interactions: recentInteractions\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialState = {\r\n  subscriptions: [],\r\n  userSubscription: null,\r\n  dismissedBanners: [],\r\n  campaigns: [],\r\n  interactions: [],\r\n  preferences: {\r\n    categories: ['new-arrivals', 'sales', 'seasonal'],\r\n    frequency: 'weekly', // daily, weekly, monthly\r\n    format: 'html' // html, text\r\n  },\r\n  loading: true\r\n};\r\n\r\nexport const MarketingProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(marketingReducer, initialState);\r\n\r\n  // Load marketing data from localStorage on app start\r\n  useEffect(() => {\r\n    try {\r\n      const subscriptions = JSON.parse(localStorage.getItem('newsletter_subscriptions') || '[]');\r\n      const dismissedBanners = JSON.parse(localStorage.getItem('dismissed_banners') || '[]');\r\n      const campaigns = JSON.parse(localStorage.getItem('marketing_campaigns') || '[]');\r\n      const interactions = JSON.parse(localStorage.getItem('marketing_interactions') || '[]');\r\n      \r\n      // Find user's current subscription\r\n      const userSubscription = subscriptions.find(sub => sub.status === 'active') || null;\r\n      \r\n      dispatch({\r\n        type: 'LOAD_MARKETING_DATA',\r\n        payload: {\r\n          subscriptions,\r\n          userSubscription,\r\n          dismissedBanners,\r\n          campaigns,\r\n          interactions\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error loading marketing data:', error);\r\n      dispatch({ type: 'LOAD_MARKETING_DATA', payload: {} });\r\n    }\r\n  }, []);\r\n\r\n  const subscribeNewsletter = (email, preferences = state.preferences) => {\r\n    if (!email || typeof email !== 'string' || !email.includes('@')) {\r\n      throw new Error('Valid email address is required');\r\n    }\r\n\r\n    // Check if already subscribed\r\n    const existingSubscription = state.subscriptions.find(\r\n      sub => sub.email === email && sub.status === 'active'\r\n    );\r\n    \r\n    if (existingSubscription) {\r\n      throw new Error('Email is already subscribed');\r\n    }\r\n\r\n    dispatch({\r\n      type: 'SUBSCRIBE_NEWSLETTER',\r\n      payload: { email, preferences }\r\n    });\r\n\r\n    // Track subscription interaction\r\n    trackInteraction('newsletter_subscribe', { email, preferences });\r\n    \r\n    return true;\r\n  };\r\n\r\n  const unsubscribeNewsletter = (subscriptionId) => {\r\n    if (!subscriptionId) {\r\n      throw new Error('Subscription ID is required');\r\n    }\r\n\r\n    dispatch({ type: 'UNSUBSCRIBE_NEWSLETTER', payload: subscriptionId });\r\n    trackInteraction('newsletter_unsubscribe', { subscriptionId });\r\n  };\r\n\r\n  const updatePreferences = (subscriptionId, preferences) => {\r\n    if (!subscriptionId || !preferences) {\r\n      throw new Error('Subscription ID and preferences are required');\r\n    }\r\n\r\n    dispatch({\r\n      type: 'UPDATE_PREFERENCES',\r\n      payload: { id: subscriptionId, preferences }\r\n    });\r\n\r\n    trackInteraction('preferences_update', { subscriptionId, preferences });\r\n  };\r\n\r\n  const dismissBanner = (bannerId) => {\r\n    if (!bannerId) {\r\n      return;\r\n    }\r\n\r\n    dispatch({ type: 'DISMISS_BANNER', payload: bannerId });\r\n    trackInteraction('banner_dismiss', { bannerId });\r\n  };\r\n\r\n  const trackInteraction = (type, data = {}) => {\r\n    dispatch({\r\n      type: 'TRACK_INTERACTION',\r\n      payload: { type, data }\r\n    });\r\n  };\r\n\r\n  const isBannerDismissed = (bannerId) => {\r\n    return state.dismissedBanners.includes(bannerId);\r\n  };\r\n\r\n  const isSubscribed = (email = null) => {\r\n    if (email) {\r\n      return state.subscriptions.some(sub => sub.email === email && sub.status === 'active');\r\n    }\r\n    return !!state.userSubscription;\r\n  };\r\n\r\n  const getActiveSubscription = () => {\r\n    return state.userSubscription;\r\n  };\r\n\r\n  const getSubscriptionStats = () => {\r\n    const total = state.subscriptions.length;\r\n    const active = state.subscriptions.filter(sub => sub.status === 'active').length;\r\n    const recent = state.subscriptions.filter(sub => {\r\n      const subDate = new Date(sub.subscribedAt);\r\n      const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\r\n      return subDate > weekAgo;\r\n    }).length;\r\n\r\n    return { total, active, recent };\r\n  };\r\n\r\n  const getPopularPreferences = () => {\r\n    const preferenceCount = {};\r\n    \r\n    state.subscriptions.forEach(sub => {\r\n      if (sub.preferences && sub.preferences.categories) {\r\n        sub.preferences.categories.forEach(category => {\r\n          preferenceCount[category] = (preferenceCount[category] || 0) + 1;\r\n        });\r\n      }\r\n    });\r\n\r\n    return Object.entries(preferenceCount)\r\n      .sort(([,a], [,b]) => b - a)\r\n      .slice(0, 5)\r\n      .map(([category, count]) => ({ category, count }));\r\n  };\r\n\r\n  const value = {\r\n    // State\r\n    subscriptions: state.subscriptions,\r\n    userSubscription: state.userSubscription,\r\n    dismissedBanners: state.dismissedBanners,\r\n    campaigns: state.campaigns,\r\n    interactions: state.interactions,\r\n    preferences: state.preferences,\r\n    loading: state.loading,\r\n\r\n    // Actions\r\n    subscribeNewsletter,\r\n    unsubscribeNewsletter,\r\n    updatePreferences,\r\n    dismissBanner,\r\n    trackInteraction,\r\n\r\n    // Utilities\r\n    isBannerDismissed,\r\n    isSubscribed,\r\n    getActiveSubscription,\r\n    getSubscriptionStats,\r\n    getPopularPreferences\r\n  };\r\n\r\n  return (\r\n    <MarketingContext.Provider value={value}>\r\n      {children}\r\n    </MarketingContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useMarketing = () => {\r\n  const context = useContext(MarketingContext);\r\n  if (context === undefined) {\r\n    throw new Error('useMarketing must be used within a MarketingProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default MarketingContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}