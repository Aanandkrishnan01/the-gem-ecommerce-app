{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\OneDrive\\\\Desktop\\\\ecommerce\\\\frontend\\\\src\\\\context\\\\ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nconst themeReducer = (state, action) => {\n  switch (action.type) {\n    case 'TOGGLE_THEME':\n      return {\n        ...state,\n        isDarkMode: !state.isDarkMode\n      };\n    case 'SET_THEME':\n      return {\n        ...state,\n        isDarkMode: action.payload\n      };\n    case 'SET_SYSTEM_PREFERENCE':\n      return {\n        ...state,\n        systemPreference: action.payload\n      };\n    default:\n      return state;\n  }\n};\nconst initialState = {\n  isDarkMode: false,\n  systemPreference: 'light'\n};\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(themeReducer, initialState);\n\n  // Check for saved theme preference or default to system preference\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme');\n    const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    if (savedTheme) {\n      dispatch({\n        type: 'SET_THEME',\n        payload: savedTheme === 'dark'\n      });\n    } else {\n      dispatch({\n        type: 'SET_THEME',\n        payload: systemPrefersDark\n      });\n    }\n    dispatch({\n      type: 'SET_SYSTEM_PREFERENCE',\n      payload: systemPrefersDark ? 'dark' : 'light'\n    });\n  }, []);\n\n  // Apply theme to document\n  useEffect(() => {\n    const root = document.documentElement;\n    if (state.isDarkMode) {\n      root.classList.add('dark');\n      root.classList.remove('light');\n    } else {\n      root.classList.add('light');\n      root.classList.remove('dark');\n    }\n\n    // Save theme preference\n    localStorage.setItem('theme', state.isDarkMode ? 'dark' : 'light');\n  }, [state.isDarkMode]);\n\n  // Listen for system theme changes\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = e => {\n      dispatch({\n        type: 'SET_SYSTEM_PREFERENCE',\n        payload: e.matches ? 'dark' : 'light'\n      });\n    };\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n  const toggleTheme = () => {\n    dispatch({\n      type: 'TOGGLE_THEME'\n    });\n  };\n  const setTheme = isDark => {\n    dispatch({\n      type: 'SET_THEME',\n      payload: isDark\n    });\n  };\n  const value = {\n    isDarkMode: state.isDarkMode,\n    systemPreference: state.systemPreference,\n    toggleTheme,\n    setTheme\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"s3jE+e7wLGXN/2uWqdAG2uRSMfA=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default ThemeContext;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","ThemeContext","themeReducer","state","action","type","isDarkMode","payload","systemPreference","initialState","ThemeProvider","children","_s","dispatch","savedTheme","localStorage","getItem","systemPrefersDark","window","matchMedia","matches","root","document","documentElement","classList","add","remove","setItem","mediaQuery","handleChange","e","addEventListener","removeEventListener","toggleTheme","setTheme","isDark","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/USER/OneDrive/Desktop/ecommerce/frontend/src/context/ThemeContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n\r\nconst ThemeContext = createContext();\r\n\r\nconst themeReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'TOGGLE_THEME':\r\n      return {\r\n        ...state,\r\n        isDarkMode: !state.isDarkMode\r\n      };\r\n    case 'SET_THEME':\r\n      return {\r\n        ...state,\r\n        isDarkMode: action.payload\r\n      };\r\n    case 'SET_SYSTEM_PREFERENCE':\r\n      return {\r\n        ...state,\r\n        systemPreference: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialState = {\r\n  isDarkMode: false,\r\n  systemPreference: 'light'\r\n};\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(themeReducer, initialState);\r\n\r\n  // Check for saved theme preference or default to system preference\r\n  useEffect(() => {\r\n    const savedTheme = localStorage.getItem('theme');\r\n    const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n    \r\n    if (savedTheme) {\r\n      dispatch({ type: 'SET_THEME', payload: savedTheme === 'dark' });\r\n    } else {\r\n      dispatch({ type: 'SET_THEME', payload: systemPrefersDark });\r\n    }\r\n    \r\n    dispatch({ type: 'SET_SYSTEM_PREFERENCE', payload: systemPrefersDark ? 'dark' : 'light' });\r\n  }, []);\r\n\r\n  // Apply theme to document\r\n  useEffect(() => {\r\n    const root = document.documentElement;\r\n    if (state.isDarkMode) {\r\n      root.classList.add('dark');\r\n      root.classList.remove('light');\r\n    } else {\r\n      root.classList.add('light');\r\n      root.classList.remove('dark');\r\n    }\r\n    \r\n    // Save theme preference\r\n    localStorage.setItem('theme', state.isDarkMode ? 'dark' : 'light');\r\n  }, [state.isDarkMode]);\r\n\r\n  // Listen for system theme changes\r\n  useEffect(() => {\r\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\r\n    const handleChange = (e) => {\r\n      dispatch({ type: 'SET_SYSTEM_PREFERENCE', payload: e.matches ? 'dark' : 'light' });\r\n    };\r\n\r\n    mediaQuery.addEventListener('change', handleChange);\r\n    return () => mediaQuery.removeEventListener('change', handleChange);\r\n  }, []);\r\n\r\n  const toggleTheme = () => {\r\n    dispatch({ type: 'TOGGLE_THEME' });\r\n  };\r\n\r\n  const setTheme = (isDark) => {\r\n    dispatch({ type: 'SET_THEME', payload: isDark });\r\n  };\r\n\r\n  const value = {\r\n    isDarkMode: state.isDarkMode,\r\n    systemPreference: state.systemPreference,\r\n    toggleTheme,\r\n    setTheme\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={value}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (!context) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default ThemeContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}